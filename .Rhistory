praatScriptFastTrack <- function(formants = c(1,2), sample.points = c(0.5), lowest.analysis.frequency = 5000, lowest.analysis.frequency.male = 4500, highest.analysis.frequency = 7000, highest.analysis.frequency.male = 6500, gender.attribute = 'participant_gender', value.for.male = "M", time.step = 0.002, tracking.method = "burg", number.of.formants = 3, maximum.f1.frequency = 1200, maximum.f1.bandwidth = NULL, maximum.f2.bandwidth = NULL, maximum.f3.bandwidth = NULL, minimum.f4.frequency = 2900, enable.rhotic.heuristic = TRUE, enable.f3.f4.proximity.heuristic = TRUE, number.of.steps = 20, number.of.coefficients = 5) {
## include FastTrack script and load default global settings
script <- "\ninclude utils/trackAutoselectProcedure.praat\n@getSettings"
## override global settings that we know about
script <- paste(script,"\ntime_step = ", time.step, sep='')
script <- paste(script,"\nmethod$ = \"", tracking.method, "\"", sep='')
if (is.null(maximum.f1.frequency)) {
script <- paste(script, "\nenable_F1_frequency_heuristic = 0", sep='')
} else {
script <- paste(script,"\nenable_F1_frequency_heuristic = 1", sep='')
script <- paste(script,"\nmaximum_F1_frequency_value = ", maximum.f1.frequency, sep='')
}
if (is.null(maximum.f1.bandwidth)) {
script <- paste(script,"\nenable_F1_bandwidth_heuristic = 0", sep='')
} else {
script <- paste(script,"\nenable_F1_bandwidth_heuristic = 1", sep='')
script <- paste(script,"\nmaximum_F1_bandwidth_value = ", maximum.f1.bandwidth, sep='')
}
if (is.null(maximum.f2.bandwidth)) {
script <- paste(script,"\nenable_F2_bandwidth_heuristic = 0", sep='')
} else {
script <- paste(script,"\nenable_F2_bandwidth_heuristic = 1", sep='')
script <- paste(script,"\nmaximum_F2_bandwidth_value = ", maximum.f2.bandwidth, sep='')
}
if (is.null(maximum.f3.bandwidth)) {
script <- paste(script,"\nenable_F3_bandwidth_heuristic = 0", sep='')
} else {
script <- paste(script,"\nenable_F3_bandwidth_heuristic = 1", sep='')
script <- paste(script,"\nmaximum_F3_bandwidth_value = ", maximum.f3.bandwidth, sep='')
}
if (is.null(minimum.f4.frequency)) {
script <- paste(script,"\nenable_F4_frequency_heuristic = 0", sep='')
} else {
script <- paste(script,"\nenable_F4_frequency_heuristic = 1", sep='')
script <- paste(script,"\nminimum_F4_frequency_value = ", minimum.f4.frequency, sep='')
}
if (enable.rhotic.heuristic) {
script <- paste(script,"\nenable_rhotic_heuristic = 1", sep='')
} else {
script <- paste(script,"\nenable_rhotic_heuristic = 0", sep='')
}
if (enable.f3.f4.proximity.heuristic) {
script <- paste(script,"\nenable_F3F4_proximity_heuristic = 1", sep='')
} else {
script <- paste(script,"\nenable_F3F4_proximity_heuristic = 0", sep='')
}
script <- paste(script,"\noutput_bandwidth = 1", sep='')
script <- paste(script,"\noutput_predictions = 1", sep='')
script <- paste(script,"\noutput_pitch = 1", sep='')
script <- paste(script,"\noutput_intensity = 1", sep='')
script <- paste(script,"\noutput_harmonicity = 1", sep='')
script <- paste(script,"\noutput_normalized_time = 1", sep='')
script <- paste(script,"\ndir$ = \".\"", sep='')
script <- paste(script,"\nsteps = ", number.of.steps, sep='')
script <- paste(script,"\ncoefficients = ", number.of.coefficients, sep='')
script <- paste(script,"\nformants = ", number.of.formants, sep='')
script <- paste(script,"\nout_formant = 2", sep='')
script <- paste(script,"\nimage = 0", sep='')
script <- paste(script,"\nmax_plot = 4000", sep='')
script <- paste(script,"\nout_table = 0", sep='')
script <- paste(script,"\nout_all = 0", sep='')
script <- paste(script,"\ncurrent_view = 0", sep='')
## Segments shorter than fastTrackMinimumDuration will be ignored, and empty values returned.
## The FastTrack limit is 0.03s (30ms), but because of possible rounding errors
## in Praat arithemitic, the default is set slightly higher than this.
script <- paste(script,"\nfastTrackMinimumDuration = 0.030000000000001", sep='')
script <- paste(script,"\nlowestAnalysisFrequency = ", lowest.analysis.frequency, sep='')
script <- paste(script,"\nhighestAnalysisFrequency = ", highest.analysis.frequency, sep='')
if (!is.null(gender.attribute)) {
## differentiate between males and others
script <- paste(script, "\nif ", gender.attribute, "$ = \"", value.for.male, "\"", sep="")
if (!is.null(lowest.analysis.frequency.male)
&& lowest.analysis.frequency != lowest.analysis.frequency.male) {
script <- paste(
script, "\n  lowestAnalysisFrequency = ", lowest.analysis.frequency.male, sep="")
}
if (!is.null(highest.analysis.frequency.male)
&& highest.analysis.frequency != highest.analysis.frequency.male) {
script <- paste(
script, "\n  highestAnalysisFrequency = ", highest.analysis.frequency.male, sep="")
}
script <- paste(script, "\nendif", sep="")
}
script <- paste( # ensure the sound sample is selected
script, "\nselect Sound 'sampleName$'", sep="")
script <- paste(
script,
"\nif windowDuration >= fastTrackMinimumDuration",
"\n  @trackAutoselect: selected(), dir$, lowestAnalysisFrequency, highestAnalysisFrequency, steps, coefficients, formants, method$, image, selected(), current_view, max_plot, out_formant, out_table, out_all", sep="")
for (point in sample.points) {
varname = paste("time_", stringr::str_replace(point, "\\.","_"), sep="")
## first output absolute point offset
script <- paste(script, "\n  pointoffset =",
" targetAbsoluteStart + ", point, " * targetDuration", sep="")
script <- paste(script, "\n  ", varname, " = pointoffset", sep="")
## now use the relative point offset
script <- paste(script, "\n  pointoffset =",
" targetStart + ", point, " * targetDuration", sep="")
for (f in formants) {
varname = paste("f", f, "_time_", stringr::str_replace(point, "\\.","_"), sep="")
script <- paste(script, "\n  ", varname,
" = Get value at time: ", f, ", pointoffset, \"hertz\", \"Linear\"",
sep="")
} ## next formant
} ## next sample point
## remove formant object
script <- paste(script, "\n  Remove", sep="")
script <- paste(script, "\nelse", sep="") ## sample is too short, output blank values
for (point in sample.points) {
varname = paste("time_", stringr::str_replace(point, "\\.","_"), sep="")
## first output absolute point offset
script <- paste(script, "\n  pointoffset =",
" targetAbsoluteStart + ", point, " * targetDuration", sep="")
script <- paste(script, "\n  ", varname, " = pointoffset", sep="")
for (f in formants) {
varname = paste("f", f, "_time_", stringr::str_replace(point, "\\.","_"), sep="")
script <- paste(script, "\n  ", varname, " = \"\"", sep="")
} ## next formant
} ## next sample point
script <- paste(script, "\nendif\n", sep="")
## To ensure LaBB-cAT can interpret correctly the number of outputs,
## only include one set of print statements:
for (point in sample.points) {
varname = paste("time_", stringr::str_replace(point, "\\.","_"), sep="")
## first output absolute point offset
script <- paste(script, "\nprint '", varname, "' 'newline$'", sep="")
for (f in formants) {
varname = paste("f", f, "_time_", stringr::str_replace(point, "\\.","_"), sep="")
script <- paste(script, "\nprint '", varname, "' 'newline$'", sep="")
} ## next formant
} ## next sample point
script <- paste(script, "\n", sep="")
return(script)
}
praatScriptFastTrack <- function(formants = c(1,2), sample.points = c(0.5), lowest.analysis.frequency = 5000, lowest.analysis.frequency.male = 4500, highest.analysis.frequency = 7000, highest.analysis.frequency.male = 6500, gender.attribute = 'participant_gender', value.for.male = "M", time.step = 0.002, tracking.method = "burg", number.of.formants = 3, maximum.f1.frequency = 1200, maximum.f1.bandwidth = NULL, maximum.f2.bandwidth = NULL, maximum.f3.bandwidth = NULL, minimum.f4.frequency = 2900, enable.rhotic.heuristic = TRUE, enable.f3.f4.proximity.heuristic = TRUE, number.of.steps = 20, number.of.coefficients = 5) {
## include FastTrack script and load default global settings
script <- "\ninclude utils/trackAutoselectProcedure.praat\n@getSettings"
## override global settings that we know about
script <- paste(script,"\ntime_step = ", time.step, sep='')
script <- paste(script,"\nmethod$ = \"", tracking.method, "\"", sep='')
if (is.null(maximum.f1.frequency)) {
script <- paste(script, "\nenable_F1_frequency_heuristic = 0", sep='')
} else {
script <- paste(script,"\nenable_F1_frequency_heuristic = 1", sep='')
script <- paste(script,"\nmaximum_F1_frequency_value = ", maximum.f1.frequency, sep='')
}
if (is.null(maximum.f1.bandwidth)) {
script <- paste(script,"\nenable_F1_bandwidth_heuristic = 0", sep='')
} else {
script <- paste(script,"\nenable_F1_bandwidth_heuristic = 1", sep='')
script <- paste(script,"\nmaximum_F1_bandwidth_value = ", maximum.f1.bandwidth, sep='')
}
if (is.null(maximum.f2.bandwidth)) {
script <- paste(script,"\nenable_F2_bandwidth_heuristic = 0", sep='')
} else {
script <- paste(script,"\nenable_F2_bandwidth_heuristic = 1", sep='')
script <- paste(script,"\nmaximum_F2_bandwidth_value = ", maximum.f2.bandwidth, sep='')
}
if (is.null(maximum.f3.bandwidth)) {
script <- paste(script,"\nenable_F3_bandwidth_heuristic = 0", sep='')
} else {
script <- paste(script,"\nenable_F3_bandwidth_heuristic = 1", sep='')
script <- paste(script,"\nmaximum_F3_bandwidth_value = ", maximum.f3.bandwidth, sep='')
}
if (is.null(minimum.f4.frequency)) {
script <- paste(script,"\nenable_F4_frequency_heuristic = 0", sep='')
} else {
script <- paste(script,"\nenable_F4_frequency_heuristic = 1", sep='')
script <- paste(script,"\nminimum_F4_frequency_value = ", minimum.f4.frequency, sep='')
}
if (enable.rhotic.heuristic) {
script <- paste(script,"\nenable_rhotic_heuristic = 1", sep='')
} else {
script <- paste(script,"\nenable_rhotic_heuristic = 0", sep='')
}
if (enable.f3.f4.proximity.heuristic) {
script <- paste(script,"\nenable_F3F4_proximity_heuristic = 1", sep='')
} else {
script <- paste(script,"\nenable_F3F4_proximity_heuristic = 0", sep='')
}
script <- paste(script,"\noutput_bandwidth = 1", sep='')
script <- paste(script,"\noutput_predictions = 1", sep='')
script <- paste(script,"\noutput_pitch = 1", sep='')
script <- paste(script,"\noutput_intensity = 1", sep='')
script <- paste(script,"\noutput_harmonicity = 1", sep='')
script <- paste(script,"\noutput_normalized_time = 1", sep='')
script <- paste(script,"\ndir$ = \".\"", sep='')
script <- paste(script,"\nsteps = ", number.of.steps, sep='')
script <- paste(script,"\ncoefficients = ", number.of.coefficients, sep='')
script <- paste(script,"\nformants = ", number.of.formants, sep='')
script <- paste(script,"\nout_formant = 2", sep='')
script <- paste(script,"\nimage = 0", sep='')
script <- paste(script,"\nmax_plot = 4000", sep='')
script <- paste(script,"\nout_table = 0", sep='')
script <- paste(script,"\nout_all = 0", sep='')
script <- paste(script,"\ncurrent_view = 0", sep='')
## Segments shorter than fastTrackMinimumDuration will be ignored, and empty values returned.
## The FastTrack limit is 0.03s (30ms), but because of possible rounding errors
## in Praat arithemitic, the default is set slightly higher than this.
script <- paste(script,"\nfastTrackMinimumDuration = 0.030000000000001", sep='')
script <- paste(script,"\nlowestAnalysisFrequency = ", lowest.analysis.frequency, sep='')
script <- paste(script,"\nhighestAnalysisFrequency = ", highest.analysis.frequency, sep='')
if (!is.null(gender.attribute)) {
## differentiate between males and others
script <- paste(script, "\nif ", gender.attribute, "$ = \"", value.for.male, "\"", sep="")
if (!is.null(lowest.analysis.frequency.male)
&& lowest.analysis.frequency != lowest.analysis.frequency.male) {
script <- paste(
script, "\n  lowestAnalysisFrequency = ", lowest.analysis.frequency.male, sep="")
}
if (!is.null(highest.analysis.frequency.male)
&& highest.analysis.frequency != highest.analysis.frequency.male) {
script <- paste(
script, "\n  highestAnalysisFrequency = ", highest.analysis.frequency.male, sep="")
}
script <- paste(script, "\nendif", sep="")
}
script <- paste( # ensure the sound sample is selected
script, "\nselect Sound 'sampleName$'", sep="")
script <- paste(
script,
"\nif windowDuration >= fastTrackMinimumDuration",
"\n  @trackAutoselect: selected(), dir$, lowestAnalysisFrequency, highestAnalysisFrequency, steps, coefficients, formants, method$, image, selected(), current_view, max_plot, out_formant, out_table, out_all", sep="")
for (point in sample.points) {
varname = paste("time_", stringr::str_replace(point, "\\.","_"), sep="")
## first output absolute point offset
script <- paste(script, "\n  pointoffset =",
" targetAbsoluteStart + ", point, " * targetDuration", sep="")
script <- paste(script, "\n  ", varname, " = pointoffset", sep="")
## now use the relative point offset
script <- paste(script, "\n  pointoffset =",
" targetStart + ", point, " * targetDuration", sep="")
for (f in formants) {
varname = paste("f", f, "_time_", stringr::str_replace(point, "\\.","_"), sep="")
script <- paste(script, "\n  ", varname,
" = Get value at time: ", f, ", pointoffset, \"hertz\", \"Linear\"",
sep="")
} ## next formant
} ## next sample point
## remove formant object
script <- paste(script, "\n  Remove", sep="")
script <- paste(script, "\nelse", sep="") ## sample is too short, output blank values
for (point in sample.points) {
varname = paste("time_", stringr::str_replace(point, "\\.","_"), sep="")
## first output absolute point offset
script <- paste(script, "\n  pointoffset =",
" targetAbsoluteStart + ", point, " * targetDuration", sep="")
script <- paste(script, "\n  ", varname, " = pointoffset", sep="")
for (f in formants) {
varname = paste("f", f, "_time_", stringr::str_replace(point, "\\.","_"), sep="")
script <- paste(script, "\n  ", varname, " = \"\"", sep="")
} ## next formant
} ## next sample point
script <- paste(script, "\nendif\n", sep="")
## To ensure LaBB-cAT can interpret correctly the number of outputs,
## only include one set of print statements:
for (point in sample.points) {
varname = paste("time_", stringr::str_replace(point, "\\.","_"), sep="")
## first output absolute point offset
script <- paste(script, "\nprint '", varname, "' 'newline$'", sep="")
for (f in formants) {
varname = paste("f", f, "_time_", stringr::str_replace(point, "\\.","_"), sep="")
script <- paste(script, "\nprint '", varname, "' 'newline$'", sep="")
} ## next formant
} ## next sample point
script <- paste(script, "\n", sep="")
return(script)
}
