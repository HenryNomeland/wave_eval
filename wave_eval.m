
% main function for evaluation
function wave_eval(base_dir, test_dir, output_dir)
    test_output = compute(test_dir);
    base_output = compute(base_dir);
    save(fullfile(output_dir, "test_output.mat"), "test_output");
    save(fullfile(output_dir, "base_output.mat"), "base_output");
    for i = 1:size(test_output,2)
        fprintf("Sample %i: \n" + ...
                "Mean F1 Test: %4.2f \n" + ...
                "Mean F1 Base: %4.2f \n" + ...
                "Mean F2 Test: %4.2f \n" + ...
                "Mean F2 Base: %4.2f \n", ...
                i, ...
                test_output(i).f1_mean, ...
                base_output(i).f1_mean, ...
                test_output(i).f2_mean, ...
                base_output(i).f2_mean);
    end
    fprintf("Evaluation Successful!\n");
end

% function that imports information from a dataVals matrix
function output = compute(directory)
    datavals_path = fullfile(directory, "dataVals.mat");
    try
        datavals = importdata(datavals_path).dataVals;
    catch ME
        % accounts for the 2 ways dataVals can be stored
        if (strcmp(ME.identifier, 'MATLAB:nonExistentField'))
            datavals = importdata(datavals_path);
        else
            disp("ERROR: Could not extract dataVals from directory.")
            disp(datavals_path);
            disp(ME);
        end
    end
    for i = size(datavals,2):-1:1
        if isempty(datavals(i).f0)
            output(i) = struct('f0_median', NaN, ...
                               'f0_mean', NaN, ...
                               'f0_start', NaN, ...
                               'f0_end', NaN, ...
                               'f1_median', NaN, ...
                               'f1_mean', NaN, ...
                               'f1_start', NaN, ...
                               'f1_end', NaN, ...
                               'f2_median', NaN, ...
                               'f2_mean', NaN, ...
                               'f2_start', NaN, ...
                               'f2_end', NaN, ...
                               'int_median', NaN, ...
                               'int_mean', NaN, ...
                               'int_start', NaN, ...
                               'int_end', NaN, ...
                               'f_onset', NaN, ...
                               'f_offset', NaN, ...
                               'pitch_onset', NaN, ...
                               'pitch_offset', NaN, ...
                               'ampl_onset', NaN, ...
                               'ampl_offset', NaN, ...
                               'dur', NaN);
            continue
        end
        output(i) = struct('f0_median', median(datavals(i).f0, "omitnan"), ...
                           'f0_mean', mean(datavals(i).f0, "omitnan"), ...
                           'f0_start', datavals(i).f0(2), ...
                           'f0_end', datavals(i).f0(end-1), ...
                           'f1_median', median(datavals(i).f1, "omitnan"), ...
                           'f1_mean', mean(datavals(i).f1, "omitnan"), ...
                           'f1_start', datavals(i).f1(2), ...
                           'f1_end', datavals(i).f1(end-1), ...
                           'f2_median', median(datavals(i).f2, "omitnan"), ...
                           'f2_mean', mean(datavals(i).f2, "omitnan"), ...
                           'f2_start', datavals(i).f2(2), ...
                           'f2_end', datavals(i).f2(end-1), ...
                           'int_median', median(datavals(i).int, "omitnan"), ...
                           'int_mean', mean(datavals(i).int, "omitnan"), ...
                           'int_start', datavals(i).int(2), ...
                           'int_end', datavals(i).int(end-1), ...
                           'f_onset', datavals(i).ftrack_taxis(2), ...
                           'f_offset', datavals(i).ftrack_taxis(end-1), ...
                           'pitch_onset', datavals(i).pitch_taxis(2), ...
                           'pitch_offset', datavals(i).pitch_taxis(end-1), ...
                           'ampl_onset', datavals(i).ampl_taxis(2), ...
                           'ampl_offset', datavals(i).ampl_taxis(end-1), ...
                           'dur', datavals(i).dur);
    end
end
